<?xml version="1.0"?>
<doc>
    <assembly>
        <name>JetBrains.RdFramework</name>
    </assembly>
    <members>
        <member name="T:JetBrains.Rd.ClientId">
            <summary>
            ClientId is a global context class that is used to distinguish the originator of an action in multi-client systems
            In such systems, each client has their own ClientId.
            
            The context is automatically propagated across async/await calls using AsyncLocal. The application should take care to preserve and propagate the current value across other kinds of asynchronous calls. 
            </summary>
        </member>
        <member name="F:JetBrains.Rd.Impl.Protocol.ProtocolInternRootRdId">
            <summary>
            Should match textual RdId of protocol intern root in Kotlin/js/cpp counterpart
            </summary>
        </member>
        <member name="F:JetBrains.Rd.Impl.Protocol.ProtocolInternScopeStringId">
            <summary>
            Should match whatever is in rd-gen for ProtocolInternScope
            </summary>
        </member>
        <member name="T:JetBrains.Rd.Impl.RdSecureString">
            <summary>
            This is a temporary stub for proper secure strings in protocol
            Unlike a normal string, this one won't be stored in logs or any other string representations of protocol entities
            </summary>
        </member>
        <member name="F:JetBrains.Rd.Impl.SocketWire.Base.TimeoutMs">
            <summary>
            Timeout for <see cref="M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)"/>  and for <see cref="M:System.Net.Sockets.Socket.Receive(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags)"/>  from socket (to guarantee read_thread termination if <see cref="M:System.Net.Sockets.Socket.Close"/> doesn't
            lead to exception thrown by <see cref="M:System.Net.Sockets.Socket.Receive(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags)"/> 
            </summary>
        </member>
        <member name="F:JetBrains.Rd.Impl.SocketWire.Base.Id">
            <summary>
            For logging
            </summary>
        </member>
        <member name="F:JetBrains.Rd.Impl.SocketWire.Base.myLifetime">
            <summary>
            Lifetime of this wire. If counterpart disconnects, lifetime is not terminate automatically.
            </summary>
        </member>
        <member name="T:JetBrains.Rd.Impl.WebSocketSharp.ByteOrder">
            <summary>
            Specifies the byte order.
            </summary>
        </member>
        <member name="F:JetBrains.Rd.Impl.WebSocketSharp.ByteOrder.Little">
            <summary>
            Specifies Little-endian.
            </summary>
        </member>
        <member name="F:JetBrains.Rd.Impl.WebSocketSharp.ByteOrder.Big">
            <summary>
            Specifies Big-endian.
            </summary>
        </member>
        <member name="T:JetBrains.Rd.Impl.WebSocketSharp.CloseStatusCode">
            <summary>
            Indicates the status code for the WebSocket connection close.
            </summary>
            <remarks>
              <para>
              The values of this enumeration are defined in
              <see href="http://tools.ietf.org/html/rfc6455#section-7.4">
              Section 7.4</see> of RFC 6455.
              </para>
              <para>
              "Reserved value" cannot be sent as a status code in
              closing handshake by an endpoint.
              </para>
            </remarks>
        </member>
        <member name="F:JetBrains.Rd.Impl.WebSocketSharp.CloseStatusCode.Normal">
            <summary>
            Equivalent to close status 1000. Indicates normal close.
            </summary>
        </member>
        <member name="F:JetBrains.Rd.Impl.WebSocketSharp.CloseStatusCode.Away">
            <summary>
            Equivalent to close status 1001. Indicates that an endpoint is
            going away.
            </summary>
        </member>
        <member name="F:JetBrains.Rd.Impl.WebSocketSharp.CloseStatusCode.ProtocolError">
            <summary>
            Equivalent to close status 1002. Indicates that an endpoint is
            terminating the connection due to a protocol error.
            </summary>
        </member>
        <member name="F:JetBrains.Rd.Impl.WebSocketSharp.CloseStatusCode.UnsupportedData">
            <summary>
            Equivalent to close status 1003. Indicates that an endpoint is
            terminating the connection because it has received a type of
            data that it cannot accept.
            </summary>
        </member>
        <member name="F:JetBrains.Rd.Impl.WebSocketSharp.CloseStatusCode.Undefined">
            <summary>
            Equivalent to close status 1004. Still undefined. A Reserved value.
            </summary>
        </member>
        <member name="F:JetBrains.Rd.Impl.WebSocketSharp.CloseStatusCode.NoStatus">
            <summary>
            Equivalent to close status 1005. Indicates that no status code was
            actually present. A Reserved value.
            </summary>
        </member>
        <member name="F:JetBrains.Rd.Impl.WebSocketSharp.CloseStatusCode.Abnormal">
            <summary>
            Equivalent to close status 1006. Indicates that the connection was
            closed abnormally. A Reserved value.
            </summary>
        </member>
        <member name="F:JetBrains.Rd.Impl.WebSocketSharp.CloseStatusCode.InvalidData">
            <summary>
            Equivalent to close status 1007. Indicates that an endpoint is
            terminating the connection because it has received a message that
            contains data that is not consistent with the type of the message.
            </summary>
        </member>
        <member name="F:JetBrains.Rd.Impl.WebSocketSharp.CloseStatusCode.PolicyViolation">
            <summary>
            Equivalent to close status 1008. Indicates that an endpoint is
            terminating the connection because it has received a message that
            violates its policy.
            </summary>
        </member>
        <member name="F:JetBrains.Rd.Impl.WebSocketSharp.CloseStatusCode.TooBig">
            <summary>
            Equivalent to close status 1009. Indicates that an endpoint is
            terminating the connection because it has received a message that
            is too big to process.
            </summary>
        </member>
        <member name="F:JetBrains.Rd.Impl.WebSocketSharp.CloseStatusCode.MandatoryExtension">
            <summary>
            Equivalent to close status 1010. Indicates that a client is
            terminating the connection because it has expected the server to
            negotiate one or more extension, but the server did not return
            them in the handshake response.
            </summary>
        </member>
        <member name="F:JetBrains.Rd.Impl.WebSocketSharp.CloseStatusCode.ServerError">
            <summary>
            Equivalent to close status 1011. Indicates that a server is
            terminating the connection because it has encountered an unexpected
            condition that prevented it from fulfilling the request.
            </summary>
        </member>
        <member name="F:JetBrains.Rd.Impl.WebSocketSharp.CloseStatusCode.TlsHandshakeFailure">
            <summary>
            Equivalent to close status 1015. Indicates that the connection was
            closed due to a failure to perform a TLS handshake. A Reserved value.
            </summary>
        </member>
        <member name="M:JetBrains.Rd.Impl.WebSocketSharp.Ext.EqualsWith(System.Int32,System.Char,System.Action{System.Int32})">
            <summary>
            Determines whether the specified <see cref="T:System.Int32"/> equals the specified <see cref="T:System.Char"/>,
            and invokes the specified <c>Action&lt;int&gt;</c> delegate at the same time.
            </summary>
            <returns>
            <c>true</c> if <paramref name="value"/> equals <paramref name="c"/>;
            otherwise, <c>false</c>.
            </returns>
            <param name="value">
            An <see cref="T:System.Int32"/> to compare.
            </param>
            <param name="c">
            A <see cref="T:System.Char"/> to compare.
            </param>
            <param name="action">
            An <c>Action&lt;int&gt;</c> delegate that references the method(s) called
            at the same time as comparing. An <see cref="T:System.Int32"/> parameter to pass to
            the method(s) is <paramref name="value"/>.
            </param>
        </member>
        <member name="T:JetBrains.Rd.Impl.WebSocketSharp.Fin">
            <summary>
            Indicates whether a WebSocket frame is the final frame of a message.
            </summary>
            <remarks>
            The values of this enumeration are defined in
            <see href="http://tools.ietf.org/html/rfc6455#section-5.2">Section 5.2</see> of RFC 6455.
            </remarks>
        </member>
        <member name="F:JetBrains.Rd.Impl.WebSocketSharp.Fin.More">
            <summary>
            Equivalent to numeric value 0. Indicates more frames of a message follow.
            </summary>
        </member>
        <member name="F:JetBrains.Rd.Impl.WebSocketSharp.Fin.Final">
            <summary>
            Equivalent to numeric value 1. Indicates the final frame of a message.
            </summary>
        </member>
        <member name="T:JetBrains.Rd.Impl.WebSocketSharp.HttpVersion">
            <summary>
            Provides the HTTP version numbers.
            </summary>
        </member>
        <member name="F:JetBrains.Rd.Impl.WebSocketSharp.HttpVersion.Version10">
            <summary>
            Provides a <see cref="T:System.Version"/> instance for the HTTP/1.0.
            </summary>
        </member>
        <member name="F:JetBrains.Rd.Impl.WebSocketSharp.HttpVersion.Version11">
            <summary>
            Provides a <see cref="T:System.Version"/> instance for the HTTP/1.1.
            </summary>
        </member>
        <member name="T:JetBrains.Rd.Impl.WebSocketSharp.Mask">
            <summary>
            Indicates whether the payload data of a WebSocket frame is masked.
            </summary>
            <remarks>
            The values of this enumeration are defined in
            <see href="http://tools.ietf.org/html/rfc6455#section-5.2">Section 5.2</see> of RFC 6455.
            </remarks>
        </member>
        <member name="F:JetBrains.Rd.Impl.WebSocketSharp.Mask.Off">
            <summary>
            Equivalent to numeric value 0. Indicates not masked.
            </summary>
        </member>
        <member name="F:JetBrains.Rd.Impl.WebSocketSharp.Mask.On">
            <summary>
            Equivalent to numeric value 1. Indicates masked.
            </summary>
        </member>
        <member name="T:JetBrains.Rd.Impl.WebSocketSharp.Opcode">
            <summary>
            Indicates the WebSocket frame type.
            </summary>
            <remarks>
            The values of this enumeration are defined in
            <see href="http://tools.ietf.org/html/rfc6455#section-5.2">
            Section 5.2</see> of RFC 6455.
            </remarks>
        </member>
        <member name="F:JetBrains.Rd.Impl.WebSocketSharp.Opcode.Cont">
            <summary>
            Equivalent to numeric value 0. Indicates continuation frame.
            </summary>
        </member>
        <member name="F:JetBrains.Rd.Impl.WebSocketSharp.Opcode.Text">
            <summary>
            Equivalent to numeric value 1. Indicates text frame.
            </summary>
        </member>
        <member name="F:JetBrains.Rd.Impl.WebSocketSharp.Opcode.Binary">
            <summary>
            Equivalent to numeric value 2. Indicates binary frame.
            </summary>
        </member>
        <member name="F:JetBrains.Rd.Impl.WebSocketSharp.Opcode.Close">
            <summary>
            Equivalent to numeric value 8. Indicates connection close frame.
            </summary>
        </member>
        <member name="F:JetBrains.Rd.Impl.WebSocketSharp.Opcode.Ping">
            <summary>
            Equivalent to numeric value 9. Indicates ping frame.
            </summary>
        </member>
        <member name="F:JetBrains.Rd.Impl.WebSocketSharp.Opcode.Pong">
            <summary>
            Equivalent to numeric value 10. Indicates pong frame.
            </summary>
        </member>
        <member name="T:JetBrains.Rd.Impl.WebSocketSharp.Rsv">
            <summary>
            Indicates whether each RSV (RSV1, RSV2, and RSV3) of a WebSocket frame is non-zero.
            </summary>
            <remarks>
            The values of this enumeration are defined in
            <see href="http://tools.ietf.org/html/rfc6455#section-5.2">Section 5.2</see> of RFC 6455.
            </remarks>
        </member>
        <member name="F:JetBrains.Rd.Impl.WebSocketSharp.Rsv.Off">
            <summary>
            Equivalent to numeric value 0. Indicates zero.
            </summary>
        </member>
        <member name="F:JetBrains.Rd.Impl.WebSocketSharp.Rsv.On">
            <summary>
            Equivalent to numeric value 1. Indicates non-zero.
            </summary>
        </member>
        <member name="T:JetBrains.Rd.Impl.WebSocketSharp.WebSocketException">
            <summary>
            The exception that is thrown when a fatal error occurs in
            the WebSocket communication.
            </summary>
        </member>
        <member name="F:JetBrains.Rd.Impl.WebSocketSharp.WebSocketFrameHeader.PayloadMaxLength">
            <summary>
            Represents the allowable max length.
            </summary>
            <remarks>
              <para>
              A <see cref="T:JetBrains.Rd.Impl.WebSocketSharp.WebSocketException"/> will occur if the payload data length is
              greater than the value of this field.
              </para>
              <para>
              If you would like to change the value, you must set it to a value between
              <c>WebSocket.FragmentLength</c> and <c>Int64.MaxValue</c> inclusive.
              </para>
            </remarks>
        </member>
        <member name="M:JetBrains.Rd.ITypesRegistrar.TryRegister(JetBrains.Rd.RdId,JetBrains.Rd.ISerializers)">
            <summary>
            Tries to discovery type with specific <see cref="T:JetBrains.Rd.RdId"/>.
            If it succeeds then should Invoke <see cref="!:ISerializers.Register&lt;T&gt;"/> method on provided serializers.
            </summary>
            <param name="id"></param>
            <param name="serializers"></param>
        </member>
        <member name="M:JetBrains.Rd.WireBase.SendPkg(JetBrains.Serialization.UnsafeWriter.Cookie)">
            <summary>
            Actual send package: len(4 bytes) + id (8 bytes) + payload
            </summary>
            <param name="pkg">Package to transmit</param>
        </member>
        <member name="M:JetBrains.Rd.RdId.DefineByFqn(System.Type)">
            <summary>
            Define an RdId by fully-qualified type name.
            You should use it only in case of C#-C# communication.
            </summary>
        </member>
        <member name="T:JetBrains.Rd.Reflection.CollectionSerializers">
            <summary>
            Special asymmetric serializers for collections. Used in reflection serializers to use covariant conversion instead of runtime casting.
            </summary>
        </member>
        <member name="M:JetBrains.Rd.Reflection.ProxyGenerator.CreateAdapter(System.Type,System.Reflection.MethodInfo)">
             <summary>
             Wrap method into Tuple-like adapter.
            
             Expected signature for sync methods
             (this, Lifetime, TReq) → RdTask{TRes}
             async methods: (which returns Task)
             (this, Lifetime, TReq) → Task{TRes}
             </summary>
             <returns></returns>
        </member>
        <member name="M:JetBrains.Rd.Reflection.ProxyGenerator.LoadArguments(System.Reflection.Emit.ILGenerator,System.Int32)">
            <summary>
            Loads the given number of arguments on the stack, excluding #0 ("this" on an instance method).
            </summary>
        </member>
        <member name="T:JetBrains.Rd.Reflection.ProxyGeneratorUtil">
            <summary>
            Helpers method which used by generated proxies.
            </summary>
        </member>
        <member name="M:JetBrains.Rd.Reflection.RdExtReflectionBindableBase.OnActivated">
            <summary>
            Override this method to set-up data flow in your RdExt
            </summary>
        </member>
        <member name="M:JetBrains.Rd.Reflection.RdReflectionBindableBase.OnActivated">
            <summary>
            Override this method to set-up data flow in your RdExt
            </summary>
        </member>
        <member name="T:JetBrains.Rd.Reflection.ReflectionRdActivator">
             <summary>
             To get maximal performance of  Rd framework you should directly provide serializers to every Model and Property.
            
             Creating models by hand with this approach is tedious and error-prone.  The main idea behind <see
             cref="T:JetBrains.Rd.Reflection.ReflectionRdActivator" /> is to automatically create RdExt and initialize fields and properties with
             appropriate serializers.
             
             </summary>
        </member>
        <member name="M:JetBrains.Rd.Reflection.ReflectionRdActivator.ActivateBind``1(JetBrains.Lifetimes.Lifetime,JetBrains.Rd.IProtocol)">
            <summary>
            Create and bind class with <see cref="T:JetBrains.Rd.Reflection.RdExtAttribute"/>
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:JetBrains.Rd.Reflection.ReflectionRdActivator.ActivateBind(System.Type,JetBrains.Lifetimes.Lifetime,JetBrains.Rd.IProtocol)">
            <summary>
            Create and bind class with <see cref="T:JetBrains.Rd.Reflection.RdExtAttribute"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:JetBrains.Rd.Reflection.ReflectionRdActivator.Activate``1">
             <summary>
             Create and initialize RdModel root and its members (including nested RdModels)
            
             It doesn't bind model to Protocol. You may want to use <see cref="M:JetBrains.Rd.Reflection.ReflectionRdActivator.ActivateBind``1(JetBrains.Lifetimes.Lifetime,JetBrains.Rd.IProtocol)"/>
             </summary>
        </member>
        <member name="M:JetBrains.Rd.Reflection.ReflectionRdActivator.Activate(System.Type)">
            <summary>
            Activate <see cref="T:JetBrains.Rd.Reflection.RdExtAttribute"/> and its members.
            Can't be used for data models
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.Rd.Reflection.ReflectionRdActivator.SetHandlerTask``2(JetBrains.Rd.Tasks.RdCall{``0,``1},System.Func{JetBrains.Lifetimes.Lifetime,``0,System.Threading.Tasks.Task{``1}})">
            <summary>
             Wrapper method to simplify search with overload resolution for two methods in RdEndpoint
            </summary>
        </member>
        <member name="M:JetBrains.Rd.Reflection.ReflectionRdActivator.SetHandlerTaskVoid``1(JetBrains.Rd.Tasks.RdCall{``0,JetBrains.Core.Unit},System.Func{JetBrains.Lifetimes.Lifetime,``0,System.Threading.Tasks.Task})">
            <summary>
             Wrapper method to simplify search with overload resolution for two methods in RdEndpoint
            </summary>
        </member>
        <member name="M:JetBrains.Rd.Reflection.ReflectionRdActivator.SetHandler``2(JetBrains.Rd.Tasks.RdCall{``0,``1},System.Func{JetBrains.Lifetimes.Lifetime,``0,JetBrains.Rd.Tasks.RdTask{``1}})">
            <summary>
             Wrapper method to simplify search with overload resolution for two methods in RdEndpoint
            </summary>
        </member>
        <member name="T:JetBrains.Rd.Reflection.RdRpcAttribute">
            <summary>
            Mark implementing interface of RdExt by this attribute to indicate intent to use this interface for proxy generation
            </summary>
        </member>
        <member name="T:JetBrains.Rd.Reflection.RdScalarAttribute">
            <summary>
            It has no special semantic. Used only to tell ReSharper about ImplicitUse.
            </summary>
        </member>
        <member name="T:JetBrains.Rd.Reflection.IProxyTypeMarker">
            <summary>
            Marker interface for proxy types.
            Used to distinguish between proxy-implemented methods, for which we should only initialize RdCall fields and other reactive properties
            and real methods in types, for which we should Bind appropriate RdEndpoint.
            </summary>
        </member>
        <member name="T:JetBrains.Rd.Reflection.ReflectionSerializersFactory">
            <summary>
            Creates and provides access to Reflection-generated serializers for Rd, thread safe
            </summary>
        </member>
        <member name="F:JetBrains.Rd.Reflection.ReflectionSerializersFactory.mySerializers">
            <summary>
            Collection true type to non-polymorphic serializer
            </summary>
        </member>
        <member name="M:JetBrains.Rd.Reflection.ReflectionSerializersFactory.RegisterModelSerializer``1">
            <summary>
            Register serializers for either <see cref="T:JetBrains.Rd.Reflection.RdExtAttribute"/> or <see cref="T:JetBrains.Rd.Reflection.RdModelAttribute"/>
            </summary>
        </member>
        <member name="M:JetBrains.Rd.Reflection.IScalarSerializers.GetOrCreate(System.Type)">
            <summary>
            Return static serializers for type
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:JetBrains.Rd.Reflection.ReflectionSerializerVerifier">
                <summary>
                Struct, Aggregate, ImmutableList are not supported.
            
                This enbf-like scheme can only be used to understand basic concepts and terms, there is no
                any strong semantics behind several leaf rules.
                <code>
                 //  RdBasic, may have inexact mapping to C# types.
                 IType ::= IBindable | IScalar
                 Bindable ::= NullableBindable | Array[Bindable] | ImmutableListBindable | Class
            
                 IScalar           ::= NullableScalar | NonNullableScalar
                 NullableScalar    ::= Maybe[NonNullableScalar]
                 NonNullableScalar ::= List[IScalar] | Array[IScalar] | PredefinedType | Struct
            
                 NonNullableBindable ::= Array[Bindable] | IReadOnlyList[Bindable] | Class
                 NonNullable::= NonNullableScalar | NonNullableBindable
            
                 FieldType ::=  IScalar|IType|Aggregate
            
                 RdProperty ::= RdProperty[FieldType]
                 RdSet      ::= RdSet[INonNullableScalar]
                 RdMap      ::= RdMap[INonNullableScalar, INonNullable]
                 RdCall     ::= RdCall[IScalar, IScalar]
                 RdSignal   ::= RdSignal[IScalar]
            
                 // C# declarations, [ and ] mean &lt; &gt;.
                 FieldDeclaration[T] ::= C#(public readonly? T identifier)
                 PropertyDeclaration[T] ::= C#(public T identifier { get; })                   |
            																C#(public T identifier { get; private set; })
            																// etc.
            																//
                 PropOrFieldDeclaration[T] ::= FieldDeclaration[T] || PropertyDeclaration[T]
                 EnumDeclaration ::= C#(Enum[enum_const*])
                 // Not supported. No RdGenerator analogue.
                 // StructDeclaration ::= C#(struct field* )
            
                 Member ::= RdSignal | RdProperty| RdList | RdSet | RdMap | RdModel | RdCall
                 Declaration ::= BindableDeclaration | Struct | Enum | RdExtDeclaration
                 BindableDeclaration ::= TopLevel | Class
            
                 MemberDeclaration ::= PropOrFieldDeclaration[Member]
                 RdModelMemberDeclaration ::= PropOrFieldDeclaration[Member|FieldType]
            
                 RdModelDeclaration ::= C#([RdModel] class {RdModelMemberDeclaration*}) | EnumDeclaration | ValueTuple[FieldType{1,7}]
                 RdExtDeclaration ::= C#([RdExt] class {MemberDeclaration}* )
            
                 ROOT ::= RdModelDeclaration ROOT | RdExtDeclaration ROOT | Nothing
                </code>
                </summary>
              *
        </member>
        <member name="F:JetBrains.Rd.Reflection.ScalarSerializer.myTypesCatalog">
            <summary>
            Types catalog required for providing information about statically discovered types during concrete serializer
            construction for sake of possibility for Rd serializers to lookup real type by representing RdId
            </summary>
        </member>
        <member name="F:JetBrains.Rd.Reflection.ScalarSerializer.myStaticSerializers">
            <summary>
            Collection instance-specific serializers (polymorphic possible)
            </summary>
        </member>
        <member name="M:JetBrains.Rd.Reflection.ScalarSerializer.GetOrCreate(System.Type)">
            <summary>
            Return static serializers for type
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.Rd.Reflection.ScalarSerializer.CreateValueTupleSerializer``1">
            <summary>
            Register serializer for ValueTuples
            </summary>
        </member>
        <member name="M:JetBrains.Rd.Reflection.SerializerReflectionUtil.GetBindableMembers(System.Reflection.TypeInfo)">
            <summary>
            Get lists of members which take part in object serialization.
            Can be used for RdExt, RdModel and any RdScalar.
            </summary>
        </member>
        <member name="T:JetBrains.Rd.Tasks.InprocRpc`2">
            <summary>
            Fake IRdCall implementation for use in single process.
            </summary>
        </member>
        <member name="M:JetBrains.Rd.Text.Impl.RdTextBuffer.#ctor">
            <summary>
            Slave of the text buffer supports a list of changes that were introduced locally and can be rolled back when master buffer reports incompatible change
            </summary>
        </member>
    </members>
</doc>
